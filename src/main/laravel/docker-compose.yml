version: "3"
services:
  # nginx:
  #   image: nginx:alpine
  #   restart: unless-stopped
  #   ports:
  #     - ${APP_PORT:-80}:80
  #   tty: true
  #   volumes:
  #     - ./:/var/www
  #     - ./docker/nginx/conf.d/:/etc/nginx/conf.d/
  #   depends_on:
  #     - app

  # app:
  #   build: .
  #   restart: unless-stopped
  #   working_dir: /var/www/
  #   tty: true
  #   volumes:
  #     - ./:/var/www
  #     - ./docker/php/local.ini:/usr/local/etc/php/conf.d/local.ini
  #   depends_on:
  #       mysql:
  #           condition: service_healthy

  app:
    build:
      context: .
      dockerfile: Dockerfile.single
    ports:
      - "8081:8081"
    environment:
      - APP_ENV=local
      - APP_DEBUG=true
    volumes:
      - .:/var/www/html
      - ./docker/php/conf.d/opcache.ini:/usr/local/etc/php/conf.d/opcache.ini
      - ./docker/apache/000-default.conf:/etc/apache2/sites-available/000-default.conf
      - ./.env:/var/www/html/.env
    # depends_on:
    #     pgsql:
    #         condition: service_healthy
    depends_on:
      - pgsql
  pgsql:
    #image: "postgres:14.2-alpine"
    image: public.ecr.aws/ubuntu/postgres:latest
    restart: unless-stopped
    ports:
      - "${FORWARD_DB_PORT:-3306}:5432"
    environment:
      POSTGRES_USER: ${SPRING_DATASOURCE_USERNAME}
      POSTGRES_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
      POSTGRES_DB: ${DOCKER_DB_DATABASE}
    tty: true
    # healthcheck:
    #   test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME}"]
    #   interval: 10s
    #   timeout: 5s
    #   retries: 5
    volumes:
      - ./docker/postgresql/postgresql-data:/var/lib/pgsql